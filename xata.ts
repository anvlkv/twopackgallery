// Generated by Xata Codegen 0.26.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "points",
    columns: [
      { name: "latitude", type: "float" },
      { name: "longitude", type: "float" },
      { name: "cover", type: "file" },
      { name: "title", type: "string", unique: true },
      { name: "description", type: "text" },
      { name: "address", type: "json" },
      { name: "location_description", type: "text" },
      { name: "status", type: "string", notNull: true, defaultValue: "draft" },
      { name: "visitors", type: "bool", notNull: true, defaultValue: "true" },
      { name: "tile", type: "file" },
    ],
    revLinks: [
      { column: "point", table: "art_forms_points" },
      { column: "point", table: "flags" },
      { column: "point", table: "users_points" },
    ],
  },
  {
    name: "art_forms",
    columns: [{ name: "name", type: "string", unique: true }],
    revLinks: [{ column: "form", table: "art_forms_points" }],
  },
  {
    name: "art_forms_points",
    columns: [
      { name: "point", type: "link", link: { table: "points" } },
      { name: "form", type: "link", link: { table: "art_forms" } },
    ],
  },
  {
    name: "users",
    columns: [
      { name: "email", type: "email", unique: true },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "anonymous",
      },
      { name: "user_id", type: "string", unique: true },
      { name: "picture", type: "file" },
      { name: "status", type: "string" },
      { name: "tag", type: "string", unique: true },
    ],
    revLinks: [
      { column: "flagged_by", table: "flags" },
      { column: "user", table: "users_points" },
    ],
  },
  {
    name: "flags",
    columns: [
      { name: "point", type: "link", link: { table: "points" } },
      { name: "flagged_by", type: "link", link: { table: "users" } },
      { name: "issue", type: "string", notNull: true, defaultValue: "other" },
      {
        name: "description",
        type: "text",
        notNull: true,
        defaultValue: "unspecified",
      },
    ],
  },
  {
    name: "feedback",
    columns: [
      {
        name: "feedback_type",
        type: "string",
        notNull: true,
        defaultValue: "issue",
      },
      { name: "description", type: "text" },
      { name: "user_email", type: "email" },
    ],
  },
  {
    name: "users_points",
    columns: [
      { name: "point", type: "link", link: { table: "points" } },
      { name: "user", type: "link", link: { table: "users" } },
      { name: "status", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Points = InferredTypes["points"];
export type PointsRecord = Points & XataRecord;

export type ArtForms = InferredTypes["art_forms"];
export type ArtFormsRecord = ArtForms & XataRecord;

export type ArtFormsPoints = InferredTypes["art_forms_points"];
export type ArtFormsPointsRecord = ArtFormsPoints & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Flags = InferredTypes["flags"];
export type FlagsRecord = Flags & XataRecord;

export type Feedback = InferredTypes["feedback"];
export type FeedbackRecord = Feedback & XataRecord;

export type UsersPoints = InferredTypes["users_points"];
export type UsersPointsRecord = UsersPoints & XataRecord;

export type DatabaseSchema = {
  points: PointsRecord;
  art_forms: ArtFormsRecord;
  art_forms_points: ArtFormsPointsRecord;
  users: UsersRecord;
  flags: FlagsRecord;
  feedback: FeedbackRecord;
  users_points: UsersPointsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://a-nvlkv-s-workspace-shskjs.eu-west-1.xata.sh/db/twopack-gallery",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
